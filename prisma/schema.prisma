// This is your Prisma schema file
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --- USER AND PROFILE MODELS ---
model User {
  id                   String           @id @default(cuid())
  email                String           @unique
  password             String
  role                 Role             @default(EMPLOYEE)
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @updatedAt
  profile              EmployeeProfile?

  // Inverse relations for approvals/denials
  approvedRequests     LeaveRequest[]   @relation("ApprovedByUser")
  deniedRequests       LeaveRequest[]   @relation("DeniedByUser")
  cancelledRequests    LeaveRequest[]   @relation("CancelledByUser")
  createdHolidays      Holiday[]        @relation("CreatedByUser")
}

model EmployeeProfile {
  id            String         @id @default(cuid())
  userId        String         @unique
  user          User           @relation(fields: [userId], references: [id])
  firstName     String
  lastName      String
  position      String
  startDate     DateTime
  managerId     String?
  manager       EmployeeProfile? @relation("DirectReports", fields: [managerId], references: [id])
  directReports EmployeeProfile[]  @relation("DirectReports")
  leaveRequests LeaveRequest[]
  leaveBalances LeaveBalance[]
  holidays      Holiday[]
}

// --- LEAVE MANAGEMENT MODELS ---
model LeaveType {
  id               String         @id @default(cuid())
  name             String         @unique
  defaultAllowance Float          @default(0)
  unit             LeaveUnit      @default(DAYS)
  cadence          LeaveCadence   @default(ANNUAL)
  balances         LeaveBalance[]
  requests         LeaveRequest[]
}

model LeaveBalance {
  id               String          @id @default(cuid())
  employeeId       String
  employee         EmployeeProfile @relation(fields: [employeeId], references: [id])
  leaveTypeId      String
  leaveType        LeaveType       @relation(fields: [leaveTypeId], references: [id])
  total            Float
  remaining        Float
  year             Int
  month            Int?
  isManualOverride Boolean         @default(false)
  isLocked         Boolean         @default(false)

  @@unique([employeeId, leaveTypeId, year, month])
}

model LeaveRequest {
  id                   String          @id @default(cuid())
  employeeId           String
  employee             EmployeeProfile @relation(fields: [employeeId], references: [id])
  leaveTypeId          String
  leaveType            LeaveType       @relation(fields: [leaveTypeId], references: [id])
  startDate            DateTime
  endDate              DateTime
  status               LeaveStatus     @default(PENDING_MANAGER)
  denialReason         String?
  cancellationReason   String?
  skipReason           String?
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt

  // Approvers
  approvedById         String?
  deniedById           String?
  cancelledById        String?
  approvedBy           User?           @relation("ApprovedByUser", fields: [approvedById], references: [id])
  deniedBy             User?           @relation("DeniedByUser", fields: [deniedById], references: [id])
  cancelledBy          User?           @relation("CancelledByUser", fields: [cancelledById], references: [id])

  // Timestamps for audit trail
  approvedAt           DateTime?
  deniedAt             DateTime?
  cancelledAt          DateTime?
}

// --- HOLIDAY MODEL ---
model Holiday {
  id            String           @id @default(cuid())
  name          String
  date          DateTime
  type          HolidayType      @default(COMPANY)
  teamId        String?
  employeeId    String?
  employee      EmployeeProfile? @relation(fields: [employeeId], references: [id])
  createdBy     String
  createdByUser User             @relation("CreatedByUser", fields: [createdBy], references: [id])
  isLocked      Boolean          @default(false)
  createdAt     DateTime         @default(now())
}

// --- ENUMS (pre-defined choices) ---
enum Role {
  EMPLOYEE
  ADMIN
  SUPER_ADMIN
}

enum LeaveStatus {
  PENDING_MANAGER
  APPROVED_BY_MANAGER
  APPROVED_BY_ADMIN
  DENIED
  CANCELLED
}

enum LeaveUnit {
  DAYS
  HOURS
}

enum LeaveCadence {
  ANNUAL
  MONTHLY
}

enum HolidayType {
  NATIONAL
  COMPANY
  TEAM
  EMPLOYEE
}